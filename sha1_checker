#!/usr/bin/env python3

import argparse
import requests

VT_BASE_URL = "https://www.virustotal.com/api/v3"


class BaseCheckerError(Exception):
    pass


class SignatureNotFound(BaseCheckerError):
    pass


class AuthenticationError(BaseCheckerError):
    pass


class InternalServerError(BaseCheckerError):
    pass


class FileResults(object):
    def __init__(self, signature, api_key):
        self.signature = signature
        self.base_url = f'{VT_BASE_URL}/files/{self.signature}'
        self._headers = {'x-apikey': api_key}

        try:
            self._hydrate()
            self.category = self._compute()
        except SignatureNotFound:
            self.category = "unknown"

    def _hydrate(self):
        request_headers = self._headers
        r = requests.get(url=self.base_url, headers=request_headers)
        if r.status_code == 200:
            self.stats = r.json()['data']['attributes']['last_analysis_stats']

        if r.status_code == 401 or r.status_code == 403:
            raise AuthenticationError

        if r.status_code == 404:
            raise SignatureNotFound

        if r.status_code == 500:
            raise InternalServerError(r.content)

    def _compute(self):
        total = 0
        for k in self.stats:
            total += self.stats[k]

        percentage = int(self.stats['malicious'] / total * 100)

        if percentage > 50:
            return 'malicious'

        if 50 > percentage > 0:
            return 'suspicious'

        return 'not malicious'


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Computes the percentage of virus engines that detected requested signature as malicious')
    parser.add_argument("signature", type=str, help="Signature value of file to test")
    parser.add_argument("--key", type=str, help="VirusTotal API Key ")
    parser.add_argument("--debug", action='store_true', default=False, help="Enable DEBUG logging")
    args = parser.parse_args()

    f = FileResults(signature=args.signature, api_key=args.key)
    print(f.category)
